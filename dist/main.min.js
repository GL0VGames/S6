(function () {
	'use strict';

	function Boot() {}

	Boot.prototype = {
		preload: function () {
			this.load.image('preloader', 'assets/preloader.gif');
		},

		create: function () {
			// configure game
			this.game.input.maxPointers = 1;

			if (this.game.device.desktop) {
				this.game.scale.pageAlignHorizontally = true;
			} else {
				this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
				this.game.scale.minWidth =  480;
				this.game.scale.minHeight = 260;
				this.game.scale.maxWidth = 640;
				this.game.scale.maxHeight = 480;
				this.game.scale.forceOrientation(true);
				this.game.scale.pageAlignHorizontally = true;
				this.game.scale.setScreenSize(true);
			}
			this.game.state.start('preloader');
		}
	};

	window['s6'] = window['s6'] || {};
	window['s6'].Boot = Boot;
}());


(function() {    
	'use strict';     
	function Credits() {}
	
	Credits.prototype = {
		create: function () {
			var credit = this.game.add.sprite(0, 0, 'creditPage');
			var buttonMenu = this.game.add.button(this.game.world.width - 136, this.game.world.height - 70, 'restart', this.startOnClick, this, 2, 1, 0);
			buttonMenu.anchor.set(0.5);
		},
		update: function () {
	
		},
		
		startOnClick: function () {
			this.game.state.start('menu');
		},
	};

	window['s6'] = window['s6'] || {};
	window['s6'].Credits = Credits;
}());
/* global Phaser */
(function() {
	'use strict';

	function Game() {}

	var player;
	var playerState = "walking";
	var actorDir = {left: 1, right: -1};
	var currPlayerDir = actorDir.left;
	var hidingPlayerTheatre = 0;
	var floor;
	var theatres;
	var floorLine;
	var hidingPlayerY;
	var walkingPlayerY;
	var cursors;
	var throwKey;
	var playerMark;
	var markLoc;
	var enemies = [];
	
	var TheatreParts = {LWALL: 0, UWALL: 1, WELL: 2, SCREEN: 3};
	
	// Global Vars
	var MOVEMENT_SPEED = 5;
	var TOTAL_THEATRES = 6;
	var THEATRE_WIDTH = 474;
	var TOTAL_ENEMIES = Math.round(TOTAL_THEATRES / 3);
	var ENEMY_RANGE = 500;
	var MAX_FACE = 3;
	var MAX_ENMH = 5;
	var worldWidth = TOTAL_THEATRES * THEATRE_WIDTH;
	var currentTheatrePosX = 0;

	var TheatreManager = {
		theatres: [],
		create: function(y, context) {
			for (var i = 0; i < TOTAL_THEATRES; i++) {
				this.theatres[i] = Theatre.create(y, context);
				currentTheatrePosX += THEATRE_WIDTH;
			}
			return this;
		},
		getParts: function(part) {
			var arr = [];
			for (var i = 0; i < TOTAL_THEATRES; i++)
				arr[i] = this.theatres[i]._[part];
			return arr;
		},
	}

	var Theatre = {
		create: function(y, context) {
			var x = currentTheatrePosX + THEATRE_WIDTH / 2;
			var ret = {
				_: [context.game.add.sprite(currentTheatrePosX, y, 'lwall'), context.game.add.sprite(currentTheatrePosX, y, 'uwall'), context.game.add.sprite(x, y, 'well'), context.game.add.sprite(currentTheatrePosX, y, 'screen')],
			}
			this.setup(ret, context);
			return ret;
		},
		setup: function (obj, context) {
			// Lower Wall
			obj._[0].scale.set(.5);
			obj._[0].anchor.set(0, 1);
			
			// Upper Wall
			obj._[1].anchor.set(0, 1);
			obj._[1].scale.set(.5);
			
			// Well
			obj._[2].scale.set(.5);
			obj._[2].anchor.set(.5, 1);
			obj._[2].tint = 0xd0d0d0;
			context.game.physics.arcade.enable(obj._[1]);

			// Screen
			obj._[3].scale.set(.5);
			obj._[3].anchor.set(0, 1);
		}
	}
	
	var FaceManager = {
		create: function(x, y, context) {
			var baseColor = Math.floor(Math.random() * MAX_FACE);
			var faceGroup = context.game.add.sprite(x, y, 'popup');
			
			faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'back' + Math.floor(Math.random() * MAX_ENMH)));
			faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'ears' + baseColor + Math.round(Math.random())));
			faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'face' + baseColor));
			faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'front' + Math.floor(Math.random() * MAX_ENMH)));
			faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'eyes' + Math.floor(Math.random() * MAX_ENMH)));
			faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'nose' + Math.floor(Math.random() * MAX_ENMH)));
			faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'mouth' + Math.floor(Math.random() * MAX_ENMH)));
			faceGroup.visible = false;
			faceGroup.anchor.set(.5, 1);
			faceGroup.scale.set(.25);
			return faceGroup;
		},
		fromArr(arr, x, y, context) {
			var faceGroup = context.game.add.sprite(x, y, 'popup');
			faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'back' + arr[0]));
			faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'ears' + arr[1]));
			faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'face' + arr[2]));
			faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'front' + arr[3]));
			faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'eyes' + arr[4]));
			faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'nose' + arr[5]));
			faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'mouth' + arr[6]));
			faceGroup.visible = false;
			faceGroup.anchor.set(.5, 1);
			faceGroup.scale.set(.25);
			return faceGroup;
		}
	}
	

	Game.prototype = {
		init: function(mark) {
			playerMark = mark;
			markLoc = Math.floor(Math.random() * TOTAL_THEATRES);
			console.log("mark in:" + markLoc);
		},
		create: function () {
			this.game.world.setBounds(0, 0, worldWidth, 600);
			
			floorLine = this.game.height - 128;
			hidingPlayerY = floorLine - 20;
			walkingPlayerY = floorLine + 40;
			
			theatres = TheatreManager.create(floorLine, this);
			
			floor = this.game.add.physicsGroup();
			for (var i = 0; i < worldWidth; i += 1024)
				floor.create(i, floorLine, 'floor');
			floor.setAll('tint', 0xd0d0d0);
			
			player = this.game.add.sprite(100, walkingPlayerY, 'player');
			player.anchor.set(0.5, 0.5);
			this.game.physics.arcade.enable(player);
			player.body.collideWorldBounds = true;
			this.game.camera.follow(player, Phaser.Camera.FOLLOW_TOPDOWN);
			
			for (var i = 0; i < TOTAL_ENEMIES; i++) {
				var locX = Math.floor(Math.random() * (worldWidth - 450)) + 300;
				enemies[i] = {
					e: this.game.add.sprite(locX, walkingPlayerY, 'enemy'),
					dir: (Math.round(Math.random()) === 0) ? actorDir.left : actorDir.right,
					startX: locX,
					max: locX + ENEMY_RANGE,
					min: locX - ENEMY_RANGE,
					speed: MOVEMENT_SPEED - 4
				};
				enemies[i].e.anchor.set(0.5, 0.5);
				enemies[i].e.scale.set(.25);
				this.game.physics.arcade.enable(enemies[i].e);
				enemies[i].e.body.collideWorldBounds = true;
			}
			
			for (var i = 0; i < TOTAL_THEATRES; i++) {
				theatres.theatres[i].em = this.game.add.emitter((i * THEATRE_WIDTH) + THEATRE_WIDTH / 2, 200, 200);
				// Particle settings
				theatres.theatres[i].em.makeParticles(['smoke1', 'smoke2', 'smoke3']);
				theatres.theatres[i].em.minParticleScale = .3;
				theatres.theatres[i].em.maxParticleScale = .3;
				theatres.theatres[i].em.particleBringToTop = false;
				
				if (i === markLoc) {
					theatres.theatres[i].face = FaceManager.fromArr(playerMark, (i * THEATRE_WIDTH) + THEATRE_WIDTH / 2, 300, this);
					theatres.theatres[i].face.visible = false;
					theatres.theatres[i].face.anchor.set(.5, 1);
					theatres.theatres[i].face.scale.set(.25);
				}
				else
					theatres.theatres[i].face = FaceManager.create((i * THEATRE_WIDTH) + THEATRE_WIDTH / 2, 300, this);
			}

			this.input.keyboard.addKey(Phaser.Keyboard.UP);
			cursors = this.game.input.keyboard.createCursorKeys();
			throwKey = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
		},

		update: function () {	
			
			for (var i = 0; i < TOTAL_ENEMIES; i++) {
				if (enemies[i].e.x >= enemies[i].max || enemies[i].e.x <= enemies[i].min) {
					if (enemies[i].e.x >= enemies[i].max) {
						enemies[i].dir = actorDir.left;
						enemies[i].e.x -= enemies[i].speed;
					}
					else if (enemies[i].e.x <= enemies[i].min) {
						enemies[i].dir = actorDir.right;
						enemies[i].e.x += enemies[i].speed;
					}
				}
				else
					if (enemies[i].dir == actorDir.right)
						enemies[i].e.x += enemies[i].speed;
					else if (enemies[i].dir == actorDir.left) {
						enemies[i].e.x -= enemies[i].speed;
					}
				if (enemies[i].dir == actorDir.right)
					enemies[i].e.scale.x = -.25;
				else
					enemies[i].e.scale.x = .25;
					
				var min = player.x + (player.width * currPlayerDir) / 2 > (enemies[i].e.x - (enemies[i].e.width * enemies[i].dir) / 2);
				var max = player.x - (player.width * currPlayerDir) / 2 < (enemies[i].e.x - (enemies[i].e.width * enemies[i].dir) / 2);
				if ((min && max) && playerState !== "hiding") {
					var context = this;
					function seen() {
						context.game.paused = false;
						context.game.state.start('winLose', false, false, "were seen");
					}
					this.game.paused = true;
					window.setTimeout(seen, 1000);
				}
			}
					
			if (playerState === "walking") {
				var wells = theatres.getParts(TheatreParts.WELL);
				
				for (var i = 0; i < TOTAL_THEATRES; i++) {
					var wellXMin = (player.x - (player.width * currPlayerDir) / 2 > wells[i].x - wells[i].width / 2);
					var wellXMax = (player.x + (player.width * currPlayerDir) / 2 < (wells[i].x + wells[i].width / 2));
					if ((wellXMin && wellXMax) && player.y <= hidingPlayerY + 10) {
						playerState = "hiding";
						hidingPlayerTheatre = i;
						break;
					}
				}
				
				if (cursors.left.isDown && player.y === walkingPlayerY) {
					player.x -= MOVEMENT_SPEED;
					player.scale.x = 1;
					currPlayerDir = actorDir.left;
				}
				else if (cursors.right.isDown && player.y === walkingPlayerY) {
					player.x += MOVEMENT_SPEED;
					player.scale.x = -1;
					currPlayerDir = actorDir.right;
				}
				
				player.tint = 0xffffff;
			}
			else if (playerState === "hiding") {
				player.tint = 0x747474;
				if (throwKey.isDown && playerState === "hiding") {
					theatres.theatres[hidingPlayerTheatre].em.start(false, 5000, 20);
					var that = this;
					if (hidingPlayerTheatre !== markLoc) {
						theatres.theatres[hidingPlayerTheatre].face.tint = 0xff4c4c;
						function lose() {
							that.game.state.start('winLose', false, false, "lose");
						}
						window.setTimeout(lose, 2500);
					}
					else {
						theatres.theatres[hidingPlayerTheatre].face.tint = 0x4cff4c;
						function win() {
							that.game.state.start('winLose', false, false, "win");
						}
						window.setTimeout(win, 2500);
					}
					playerState = "smoking";
				}
				theatres.theatres[hidingPlayerTheatre].face.visible = true;
			}
			else if (playerState === "moving") {
				player.tint = 0xffffff;
			}

			this.game.input.keyboard.onDownCallback = function( e ){
				if (e.keyCode === Phaser.Keyboard.UP) {
					this.game.add.tween(player).to( { x: player.x, y: hidingPlayerY }, 100 * MOVEMENT_SPEED, "Cubic", true);
				}
			};

			function back2Walking() {
				playerState = "walking";
				theatres.theatres[hidingPlayerTheatre].face.visible = false;
			}

			this.game.input.keyboard.onUpCallback = function( e ){
				if(e.keyCode === Phaser.Keyboard.UP) {
					if (playerState !== "smoking") {
						var tween = this.game.add.tween(player);
						tween.to( { x: player.x, y: walkingPlayerY }, 125 * MOVEMENT_SPEED, "Cubic", true);
						tween.onComplete.add(back2Walking, this);
						playerState = "moving";
					}
				}
			};
		}
	};

	window['s6'] = window['s6'] || {};
	window['s6'].Game = Game;
}());

/* global Phaser */
window.addEventListener('load', function () {
	'use strict';

	var ns = window['s6'];
	var game = new Phaser.Game(1024, 600, Phaser.AUTO, 's6-game');
	game.state.add('boot', ns.Boot);
	game.state.add('preloader', ns.Preloader);
	game.state.add('menu', ns.Menu);
	game.state.add('mark', ns.Mark);
	game.state.add('game', ns.Game);
	game.state.add('winLose', ns.WinLose);
	game.state.add('credits', ns.Credits);
	/* yo phaser:state new-state-files-put-here */
	game.state.start('boot');
}, false);

(function() {    
	'use strict';     
	function Mark() {}
	
	var playerMark;
	var MAX_FACE = 3;
	var MAX_ENMH = 5;
	var makeMark = function(x, y, context) {
		var baseColor = Math.floor(Math.random() * MAX_FACE);
		var faceGroup = context.game.add.sprite(x, y, 'popup');
		var stuff = [ Math.floor(Math.random() * MAX_ENMH), baseColor.toString() + Math.round(Math.random()), baseColor, Math.floor(Math.random() * MAX_ENMH), Math.floor(Math.random() * MAX_ENMH), Math.floor(Math.random() * MAX_ENMH), Math.floor(Math.random() * MAX_ENMH) ];
		faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'back' + stuff[0]));
		faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'ears' + stuff[1]));
		faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'face' + stuff[2]));
		faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'front' + stuff[3]));
		faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'eyes' + stuff[4]));
		faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'nose' + stuff[5]));
		faceGroup.addChild(context.game.make.sprite(0 - faceGroup.width / 2, 0 - faceGroup.height - 100, 'mouth' + stuff[6]));
		faceGroup.visible = false;
		faceGroup.anchor.set(.5, 1);
		faceGroup.scale.set(.25);
		return stuff;
	}
	
	var descriptions = {
		"eyes0": ["bored", "tired"],
		"eyes1": ["angry", "unhappy"],
		"eyes2": ["calm", "neutral"],
		"eyes3": ["very cheerful", "very content"],
		"eyes4": ["melancholy", "sorry"],
		"eyes5": ["suspicious", "cautious"],
		"nose0": ["cute", "dainty"],
		"nose1": ["pointy", "wisdomatic"],
		"nose2": ["average", "plain"],
		"nose3": ["sharp", "chiseled"],
		"nose4": ["round", "nubby"],
		"nose5": ["strong", "powerful"],
		"mouth0": ["indifferent", "disinterested"],
		"mouth1": ["uptight", "bitter"],
		"mouth2": ["satisfied", "alright"],
		"mouth3": ["happy", "smiling"],
		"mouth4": ["unhappy", "sad"],
		"mouth5": ["worried", "distressed"],
		"front0": ["brown", "straight"],
		"front1": ["dark", "sideburned"],
		"front2": ["prim", "brown"],
		"front3": ["black", "curly"],
		"front4": ["brown", "curly"],
		"front5": ["blond", "spiky"],
		"back0": ["long", "straight"],
		"back1": ["long", "dark"],
		"back2": ["long", "brown"],
		"back3": ["no", "no"],
		"back4": ["no", "no"],
		"back5": ["short", "light"],
		"ears00": ["average", "light"],
		"ears01": ["big", "light"],
		"ears10": ["average", "dark"],
		"ears11": ["big", "dark"],
		"ears20": ["average", "tan"],
		"ears21": ["big", "tan"],
		"face0": ["fair", "pasty"],
		"face1": ["dark", "brown"],
		"face2": ["tan", "amber"]
	}
	
	Mark.prototype = {
		create: function () {
			var buttonStart = this.game.add.button(this.game.world.width - 100, this.game.world.height - 70, 'ready', this.startOnClick, this, 2, 1, 0);
			buttonStart.anchor.set(0.5);
			
			var titleStyle = { font: "bold 64px Calibri", fill: "#fff", align: "center" };
			var title = this.game.add.text(230, 90, 'Your target...', titleStyle);
			title.anchor.set(0.5);
			playerMark = makeMark(512, 740, this);
			
			var descriptionStyle = { font: "bold 48px Calibri", fill: "#fff", align: "center", wordWrap: true, wordWrapWidth: 800 };
			var description = "will stare at you with " + descriptions["eyes" + playerMark[4]][Math.round(Math.random())] + " eyes.  " + 
							  "Their nose is " + descriptions["nose" + playerMark[5]][Math.round(Math.random())] + ".  " + 
							  "Their mouth curls in a(n) " + descriptions["mouth" + playerMark[6]][Math.round(Math.random())] + " way.  " + 
							  "They have " + descriptions["front" + playerMark[3]][Math.round(Math.random())] + " hair on top " + 
							  "and " + descriptions["back" + playerMark[0]][Math.round(Math.random())] + " hair in back.  " + 
							  "Your target has a " + descriptions["face" + playerMark[2]][Math.round(Math.random())] + " face " + 
							  "and " + descriptions["ears" + playerMark[1]][Math.round(Math.random())] + " ears.  " +
							  "Good luck!";
			var text = this.game.add.text(this.game.world.centerX, this.game.world.centerY, description, descriptionStyle);
			text.anchor.set(0.5);
		},
		update: function () {
	
		},
		
		startOnClick: function () {
			this.game.state.start('game', true, false, playerMark);
		},
	};

	window['s6'] = window['s6'] || {};
	window['s6'].Mark = Mark;
}());
(function() {
	'use strict';

	function Menu() {}

	Menu.prototype = {
		create: function () {
			var buttonStart = this.game.add.button(384,
											  428,
											  'start',
											  this.startOnClick,
											  this,
											  2, 1, 0);
			var buttonCredits = this.game.add.button(640,
											  428,
											  'credits',
											  this.actionOnClick,
											  this,
											  2, 1, 0);
			buttonStart.anchor.set(0.5);
			buttonCredits.anchor.set(0.5);

			var style = { font: "bold 64px Calibri", fill: "#fff", align: "center" };
			var title = this.game.add.text(512,
				204,
				'SNEAKILY SLINGING\nSLIGHTLY SULFUROUS-SMELLING\nSMOKE\n(or S6, for short)',
				style);

			title.anchor.set(0.5);

			title.addColor("#FF4C4C", 0);
			title.addColor("#FFFFFF", 1);
			title.addColor("#FF4C4C", 9);
			title.addColor("#FFFFFF", 10);
			title.addColor("#FF4C4C", 17);
			title.addColor("#FFFFFF", 18);
			title.addColor("#FF4C4C", 26);
			title.addColor("#FFFFFF", 27);
			title.addColor("#FF4C4C", 36);
			title.addColor("#FFFFFF", 37);
			title.addColor("#FF4C4C", 44);
			title.addColor("#FFFFFF", 45);
			title.addColor("#4C4CFF", 52);
			title.addColor("#FFFFFF", 55);

		},

		update: function () {

		},

		startOnClick: function () {
			this.game.state.start('mark');
		},
		actionOnClick: function () {
			this.game.state.start('credits');
		},

	};

	window['s6'] = window['s6'] || {};
	window['s6'].Menu = Menu;
}());

(function() {
	'use strict';

	function Preloader() {
		this.asset = null;
		this.ready = false;
	}

	Preloader.prototype = {
		preload: function () {
			this.asset = this.add.sprite(this.game.width * 0.5 - 110, this.game.height * 0.5 - 10, 'preloader');
			this.load.setPreloadSprite(this.asset);

			// this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
			this.loadResources();

			this.ready = true;
		},

		loadResources: function () {
			// load your assets here
			this.game.stage.backgroundColor = '#85b5e1';

			this.game.load.baseURL = './assets/';
			this.game.load.crossOrigin = 'anonymous';

			// ----- Menu -----
			this.game.load.image('credits', 'Credits button.png');
			this.game.load.image('start', 'StartButton.png');
			
			// ----- Mark -----
			this.game.load.image('ready', "ready button.png");
			
			// ----- WinLose -----
			this.game.load.image("restart", "restart button.png");

			// ----- Background -----
			this.game.load.image('well', 'backgrounds/well.png');
			this.game.load.image('screen', 'backgrounds/screen.png');

			this.game.load.image('lwall', 'backgrounds/lower wall.png');
			this.game.load.image('uwall', 'backgrounds/upper wall.png');
			this.game.load.image('floor', 'backgrounds/floor.png');

			// ----- Smoke -----
			this.game.load.image('smoke1', 'effects/smoke 1.png');
			this.game.load.image('smoke2', 'effects/smoke 2.png');
			this.game.load.image('smoke3', 'effects/smoke 3.png');

			// ----- Actors -----
			this.game.load.image('player', 'kenny/Characters/Hedgehog/hedgehog_body.png');
			this.game.load.image('enemy', 'Mr Boo.png');
			
			// ----- Credits -----
			this.game.load.image('creditPage', 'Credits Page.png');

			// ----- Face Stuff -----
			// Popup
			this.game.load.image('popup', 'popup.png');

			// Eyes
			this.game.load.image('eyes0', 'face elements/bored eyes.png');
			this.game.load.image('eyes1', 'face elements/mad eyes.png');
			this.game.load.image('eyes2', 'face elements/normal eyes.png');
			this.game.load.image('eyes3', 'face elements/pleased eyes.png');
			this.game.load.image('eyes4', 'face elements/sad eyes.png');
			this.game.load.image('eyes5', 'face elements/suspicious eyes.png');

			// Nose
			this.game.load.image('nose0', 'face elements/cute nose.png');
			this.game.load.image('nose1', 'face elements/long nose.png');
			this.game.load.image('nose2', 'face elements/normal nose.png');
			this.game.load.image('nose3', 'face elements/pointy nose.png');
			this.game.load.image('nose4', 'face elements/squat nose.png');
			this.game.load.image('nose5', 'face elements/strong nose.png');

			// Mouth
			this.game.load.image('mouth0', 'face elements/bored mouth.png');
			this.game.load.image('mouth1', 'face elements/mad mouth.png');
			this.game.load.image('mouth2', 'face elements/normal mouth.png');
			this.game.load.image('mouth3', 'face elements/pleased mouth.png');
			this.game.load.image('mouth4', 'face elements/sad mouth.png');
			this.game.load.image('mouth5', 'face elements/worried mouth.png');

			// Front hair
			this.game.load.image('front0', 'face elements/normal hair fore.png');
			this.game.load.image('front1', 'face elements/black girl fore.png');
			this.game.load.image('front2', 'face elements/prim hair fore.png');
			this.game.load.image('front3', 'face elements/boy black hair fore.png');
			this.game.load.image('front4', 'face elements/boybrown curly hair fore.png');
			this.game.load.image('front5', 'face elements/spiky blond boy.png');

			// Back hair
			this.game.load.image('back0', 'face elements/girl hair back.png');
			this.game.load.image('back1', 'face elements/black girl back.png');
			this.game.load.image('back2', 'face elements/prim girl hair back.png');
			this.game.load.image('back3', 'face elements/boy back hair prim.png');
			this.game.load.image('back4', 'face elements/boy back hair black.png');
			this.game.load.image('back5', 'face elements/blonde boy back.png');

			// Ears
			this.game.load.image('ears00', 'face elements/white ears med.png');
			this.game.load.image('ears01', 'face elements/white ears big.png');
			this.game.load.image('ears10', 'face elements/brown ears med.png');
			this.game.load.image('ears11', 'face elements/brown ears big.png');
			this.game.load.image('ears20', 'face elements/tan ears med.png');
			this.game.load.image('ears21', 'face elements/tan ears big.png');

			// Face
			this.game.load.image('face0', 'face elements/facebase white.png');
			this.game.load.image('face1', 'face elements/facebase brown.png');
			this.game.load.image('face2', 'face elements/facebase tan.png');
		},

		create: function () {

		},

		update: function () {
			// if (!!this.ready) {
			this.game.state.start('menu');
			// }
		},

		onLoadComplete: function () {
			// this.ready = true;
		}
	};

	window['s6'] = window['s6'] || {};
	window['s6'].Preloader = Preloader;
}());

(function() {    
	'use strict';     
	function WinLose() {}
	
	var winlose;
	
	WinLose.prototype = {
		init: function(wl) {
			winlose = wl;
		},
		create: function () {			
			var style = { font: "bold 64px Calibri", fill: "#fff", align: "center" };
			var text = "You " + winlose + "!"
			var title = this.game.add.text(512, 300, text, style);
			title.anchor.set(0.5);
			if (winlose === "win")
				title.addColor("#4CFF4C", 0);
			else title.addColor("#FF4C4C", 0);

			var buttonLose = this.game.add.button(888, 530, 'restart', this.startOnClick, this, 2, 1, 0);
			buttonLose.anchor.set(0.5);
		},
		update: function () {
	
		},
		
		startOnClick: function () {
			this.game.state.start('menu');
		},
	};

	window['s6'] = window['s6'] || {};
	window['s6'].WinLose = WinLose;
}());